I"Z$<ul id="markdown-toc">
  <li><a href="#一生成根证书" id="markdown-toc-一生成根证书">一、生成根证书</a>    <ul>
      <li><a href="#1-生成根证书私钥pem文件" id="markdown-toc-1-生成根证书私钥pem文件">1. 生成根证书私钥（pem文件）</a></li>
      <li><a href="#2-生成根证书签发申请文件csr文件" id="markdown-toc-2-生成根证书签发申请文件csr文件">2. 生成根证书签发申请文件（csr文件）</a></li>
      <li><a href="#3-生成根证书cer文件" id="markdown-toc-3-生成根证书cer文件">3. 生成根证书（cer文件）</a></li>
    </ul>
  </li>
  <li><a href="#二签发server端证书" id="markdown-toc-二签发server端证书">二、签发Server端证书</a></li>
  <li><a href="#三签发client端证书" id="markdown-toc-三签发client端证书">三、签发Client端证书</a></li>
  <li><a href="#四证书验证" id="markdown-toc-四证书验证">四、证书验证</a>    <ul>
      <li><a href="#1-使用openssl验证" id="markdown-toc-1-使用openssl验证">1. 使用openssl验证</a></li>
      <li><a href="#2-使用windows验证" id="markdown-toc-2-使用windows验证">2. 使用Windows验证</a></li>
    </ul>
  </li>
  <li><a href="#五参考文档" id="markdown-toc-五参考文档">五、参考文档</a></li>
</ul>

<p>本文主要介绍如何基于openssl制作X.509自签名证书，以及如何使用该证书签发新证书。</p>

<h2 id="一生成根证书">一、生成根证书</h2>

<h3 id="1-生成根证书私钥pem文件">1. 生成根证书私钥（pem文件）</h3>

<p>下面的命令用来生成根证书的私钥，相关参数说明如下：</p>

<ul>
  <li>genrsa：使用RSA算法产生私钥，尾部的2048代表密钥长度为2048比特。</li>
  <li>aes256：使用256位密钥的AES算法对私钥进行加密，也可以选择其他算法进行加密。若使用加密，输入指令后会提示用户输入密码，该密码需妥善保管，因为后续只要使用该私钥都需要输入密码；如果不想对私钥加密，不使用该选项即可。</li>
  <li>out：输出的私钥文件名，可以指定路径。</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl genrsa -aes256 -out rootCA.pem 2048
</code></pre></div></div>

<h3 id="2-生成根证书签发申请文件csr文件">2. 生成根证书签发申请文件（csr文件）</h3>

<p>下面的命令，使用上面生成的私钥，生成证书申请文件，相关参数说明如下：</p>

<ul>
  <li>req：请求命令</li>
  <li>new：新证书签发请求</li>
  <li>key：生成证书所使用的私钥文件</li>
  <li>out：输出的证书签发申请文件名</li>
</ul>

<p>下面的指令输入后，会提示用户输入一些信息，如国家（中国是CN）/省份/城市/公司等，根据提示输入即可，若对应的项不填写，可以输入<code class="highlighter-rouge">.</code>。<br />
注意：</p>

<ul>
  <li><code class="highlighter-rouge">Common Name</code>中可以输入该证书对应的域名。</li>
  <li>签发的子证书中<code class="highlighter-rouge">Common Name</code>必须和根证书的不同，最好相互之间也不重复。</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req -new -key rootCA.pem -out rootCA.csr
</code></pre></div></div>

<h3 id="3-生成根证书cer文件">3. 生成根证书（cer文件）</h3>

<p>证书签发申请文件(csr文件）生成后，可以发送给CA机构，让其帮忙签发证书（一般是收费的），也可以使用下面的命令生成自签名证书，相关参数说明如下：</p>

<ul>
  <li>x509：证书格式为X.509</li>
  <li>req：请求命令</li>
  <li>days：证书的有效期，单位是天</li>
  <li>sha1：证书摘要采用sha1算法</li>
  <li>signkey：签发证书使用的私钥</li>
  <li>in：证书签发申请文件（csr文件）</li>
  <li>out：输出的cer证书文件</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl x509 -req -days 365 -sha1 -signkey rootCA.pem -in rootCA.csr -out rootCA.cer
</code></pre></div></div>

<p>至此，我们已经拥有了根证书rootCA.cer，以及该证书对应的私钥rootCA.pem。</p>

<p><em>注：公钥可以根据私钥生成，后续用不到，所以不再生成。</em></p>

<h2 id="二签发server端证书">二、签发Server端证书</h2>

<ol>
  <li>
    <p>生成Sever端的私钥</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl genrsa -out server.pem 2048  
</code></pre></div>    </div>
  </li>
  <li>
    <p>生成证书签发申请文件<br />
输入下面的指令后，根据提示输入相关信息：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl req -new -key server.pem -out server.csr
</code></pre></div>    </div>
  </li>
  <li>
    <p>使用根证书签发Server端证书<br />
在颁发Server端证书的时候，用到了根证书rootCA.cer，以及根证书对应的私钥rootCA.pem，二者缺一不可。部分参数说明如下：</p>
    <ul>
      <li>CA：证书颁发机构的证书，这里是根证书rootCA.cer，多级签发的时候，这里也可以是中间证书</li>
      <li>CAkey：证书颁发机构的的私钥，这里是根证书的私钥rootCA.pem，多级签发的时候，这里也可以是中间证书的私钥</li>
      <li>CAcreateserial：创建证书序列号文件，该序列号在经由rootCA颁发的证书中是全局唯一的，可以唯一标识一个证书；创建的序列号文件默认名称为<code class="highlighter-rouge">CA参数指定的证书名加上.srl后缀</code>，比如下面的例子生成的序列号文件为rootCA.srl。</li>
    </ul>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl x509 -req -days 365 -sha1  -CA rootCA.cer -CAkey rootCA.pem -in server.csr -CAcreateserial -out server.cer
</code></pre></div>    </div>
  </li>
</ol>

<p>现在我们拥有了Server端的证书server.cer以及对应的私钥server.pem。</p>

<h2 id="三签发client端证书">三、签发Client端证书</h2>

<ol>
  <li>生成Client端的私钥
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl genrsa -out client.pem 2048  
</code></pre></div>    </div>
  </li>
  <li>生成证书签发申请文件<br />
输入下面的指令后，根据提示输入相关信息：
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl req -new -key client.pem -out client.csr
</code></pre></div>    </div>
  </li>
  <li>使用根证书签发Client端证书
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl x509 -req -days 365 -sha1  -CA rootCA.cer -CAkey rootCA.pem -in client.csr -CAcreateserial -out client.cer
</code></pre></div>    </div>
    <p>现在我们拥有了Client端的证书client.cer以及对应的私钥client.pem。</p>
  </li>
</ol>

<h2 id="四证书验证">四、证书验证</h2>

<p>上面我们已经生成了根证书rootCA.cer，并用该根证书签发了服务器证书server.cer和客户端证书client.cer。
也就是说形成了两条信任链：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rootCA.cer --&gt; server.cer
rootCA.cer --&gt; client.cer
</code></pre></div></div>

<h3 id="1-使用openssl验证">1. 使用openssl验证</h3>

<p>基于rootCA.cer验证sever.cer:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl verify -CAfile rootCA.cer sever.cer 
</code></pre></div></div>

<p>成功则输出结果为OK，否则会有提示信息。</p>

<h3 id="2-使用windows验证">2. 使用Windows验证</h3>

<p>双击sever.cer，可以看到证书验证失败，这是因为系统上没人为该证书背书：</p>

<p><img src="http://data.coderhuo.tech/blog/self_signed_cert/sever_not_auth.png" alt="验证失败" /></p>

<p>双击rootCA.cer，点击下面的<code class="highlighter-rouge">安装证书</code>按钮，根据提示安装根证书（安装位置选择<code class="highlighter-rouge">安装到受信任的根证书颁发机构</code>）。根证书安装后，代表这台电脑无条件信任根证书，以及经由rootCA.cer签发的其他证书。</p>

<p>这时再打开sever.cer，如下图所示，已经验证成功（有rootCA.cer为他进行信任背书了):</p>

<p><img src="http://data.coderhuo.tech/blog/self_signed_cert/sever_auth.png" alt="验证成功" /></p>

<h2 id="五参考文档">五、参考文档</h2>
<ol>
  <li><a href="https://yq.aliyun.com/articles/40398?spm=a2c4e.11153940.0.0.69928c988yuZJK&amp;type=2">OpenSSL生成根证书CA及签发子证书</a></li>
  <li><a href="https://stackoverflow.com/questions/19726138/openssl-error-18-at-0-depth-lookupself-signed-certificate">OpenSSL - error 18 at 0 depth lookup:self signed certificate</a></li>
  <li><a href="https://www.jianshu.com/p/46e48bc517d0">证书链-Digital Certificates</a></li>
  <li><a href="https://blog.cnbluebox.com/blog/2014/03/24/shu-zi-zheng-shu/">数字证书</a></li>
</ol>
:ET
I"<ul id="markdown-toc">
  <li><a href="#一编译zlib版本zlib-128" id="markdown-toc-一编译zlib版本zlib-128">一、编译zlib：(版本zlib-1.2.8)</a></li>
  <li><a href="#二编译openssl版本openssl-openssl_1_0_2g" id="markdown-toc-二编译openssl版本openssl-openssl_1_0_2g">二、编译openssl：（版本openssl-OpenSSL_1_0_2g）</a></li>
  <li><a href="#三编译curl版本curl-7290" id="markdown-toc-三编译curl版本curl-7290">三、编译curl：（版本curl-7.29.0）</a></li>
</ul>

<p>arm平台curl交叉编译方法。<br />
基于curl + openssl + zlib 的方式组建arm上的https客户端，其中curl作为http客户端，openssl提供https支持，zlib负责处理gzip压缩的http报文。</p>

<p>编译目录结构如下:</p>

<p><img src="http://data.coderhuo.tech/blog/curl%B1%E0%D2%EB%C4%BF%C2%BC%BD%E1%B9%B9%CD%BC.jpg" alt="目录结构图" /></p>

<p>其中curl-7.29.0、openssl-OpenSSL_1_0_2g和zlib-1.2.8是待编译的源码。libs用来存放编译出来的库以及头文件。</p>

<p>编译所需源码附件中列出，也可自行下载（最好从官网下）。</p>

<p>下面的例子中https_framework的全路径是/home/test/https_framework。</p>
<h2 id="一编译zlib版本zlib-128">一、编译zlib：(版本zlib-1.2.8)</h2>
<ol>
  <li>执行下面的命令生成makefile:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./configure --prefix=/home/test/https_framework/libs/zlib
</code></pre></div>    </div>
  </li>
  <li>由于zlib在生成makefile的时候不支持修改编译器选项，只好在makefile中修改：
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> AR=ar   
 RANLIB=ranlib
</code></pre></div>    </div>

    <p>改成:</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> AR=arm-linux-gnueabihf-ar
 RANLIB=arm-linux-gnueabihf-ranlib
</code></pre></div>    </div>
    <p>然后全文搜索一下gcc, 全部替换成arm-linux-gnueabihf-gcc</p>
  </li>
  <li>执行make 命令编译</li>
  <li>执行make install命令安装</li>
  <li>生成的头文件、库都在/home/test/https_framework/libs/zlib目录下</li>
</ol>

<h2 id="二编译openssl版本openssl-openssl_1_0_2g">二、编译openssl：（版本openssl-OpenSSL_1_0_2g）</h2>
<ol>
  <li>执行下面的命令生成makefile:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./Configure linux-elf-arm linux:'arm-linux-gnueabihf-gcc' --prefix=/home/test/https_framework/libs/openssl
</code></pre></div>    </div>

    <p>x86用下面的命令</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./Configure linux-x86_64 --prefix=/home/test/https_framework/libs/openssl 
</code></pre></div>    </div>

    <p>如果提示编译前先make depend，可忽略。</p>
  </li>
  <li>
    <p>在makefile中做如下修改：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> RANLIB= /usr/bin/ranlib  --&gt;  RANLIB= arm-linux-gnueabihf-ranlib  
 NM= nm                   --&gt;  NM= arm-linux-gnueabihf-nm
</code></pre></div>    </div>
  </li>
  <li>执行make 命令编译</li>
  <li>执行make install命令安装</li>
  <li>生成的头文件、库都在/home/test/https_framework/libs/openssl 目录下</li>
</ol>

<h2 id="三编译curl版本curl-7290">三、编译curl：（版本curl-7.29.0）</h2>
<ol>
  <li>执行下面的命令生成makefile:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./configure --with-ssl=/home/test/https_framework/libs/openssl --with-zlib=/home/test/https_framework/libs/zlib --host=arm-linux-gnueabihf --target=arm-linux-gnueabihf --prefix=/home/test/https_framework/libs/curl/ --enable-shared=0
</code></pre></div>    </div>

    <p>其中<br />
 –enable-shared=0 说明只编译静态库<br />
 –with-ssl= 指定openssl的安装路径<br />
 –with-zlib= 指定zlib的安装路径</p>
  </li>
  <li>
    <p>configure执行完毕后输出配置信息，注意查看openssl和zlib是否使能：</p>

    <p>curl version: 7.29.0<br />
 <strong>SSL support: enabled (OpenSSL)</strong><br />
 SSH support: no (–with-libssh2)<br />
 <strong>zlib support: enabled</strong></p>
  </li>
  <li>执行make 命令编译</li>
  <li>执行make install命令安装</li>
  <li>生成的头文件、库都在/home/test/https_framework/libs/curl/ 目录下</li>
  <li>编译x86平台下的库会默认开启openssl和zlib选项，可以通过--without-ssl和--without-zlib 分别禁止掉</li>
</ol>
:ET